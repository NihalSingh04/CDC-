#include <iostream>
using namespace std;

struct Node {
    int data;
    Node* next;
};

// Rotate list to the right by k
Node* rotateRight(Node* head, int k) {
    if (!head || !head->next || k == 0) return head;

    // Count length
    int len = 1;
    Node* tail = head;
    while (tail->next) {
        tail = tail->next;
        len++;
    }

    k = k % len;
    if (k == 0) return head;

    // Connect tail to head to make it circular
    tail->next = head;
    Node* newTail = head;
    for (int i = 0; i < len - k - 1; i++) newTail = newTail->next;
    Node* newHead = newTail->next;
    newTail->next = nullptr;
    return newHead;
}

void printList(Node* head) {
    while (head) {
        cout << head->data << " -> ";
        head = head->next;
    }
    cout << "NULL\n";
}

int main() {
    Node* head = new Node{1, new Node{2, new Node{3, new Node{4, new Node{5, nullptr}}}}};
    int k = 2;
    head = rotateRight(head, k);
    cout << "Rotated List: ";
    printList(head);
    return 0;
}
