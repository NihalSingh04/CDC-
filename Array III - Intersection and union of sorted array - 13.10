#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

// Function to print union and intersection of two sorted arrays
int main()
{
  vector<int> a = {1, 2, 4, 5, 6};
  vector<int> b = {2, 3, 5, 7};

  int i = 0, j = 0;
  vector<int> Union, Intersection;

  // Traverse both arrays together
  while (i < a.size() && j < b.size())
  {
    // If both elements are same -> add once to union & intersection
    if (a[i] == b[j])
    {
      Union.push_back(a[i]);
      Intersection.push_back(a[i]);
      i++;
      j++;
    }
    // Smaller one goes to union and increment that pointer
    else if (a[i] < b[j])
    {
      Union.push_back(a[i]);
      i++;
    }
    else
    {
      Union.push_back(b[j]);
      j++;
    }
  }

  // Add remaining elements
  while (i < a.size())
    Union.push_back(a[i++]);
  while (j < b.size())
    Union.push_back(b[j++]);

  // Remove duplicates (optional, if input may have them)
  Union.erase(unique(Union.begin(), Union.end()), Union.end());

  cout << "Union: ";
  for (int x : Union)
    cout << x << " ";
  cout << "\nIntersection: ";
  for (int x : Intersection)
    cout << x << " ";
  cout << endl;

  return 0;
}

/*
Explanation:
- We move two pointers (i, j) across both arrays.
- If same elements → belongs to both union & intersection.
- If one smaller → move that pointer.
- Finally, we append leftovers (if any).

Time Complexity: O(n + m)
Space Complexity: O(n + m)
*/
