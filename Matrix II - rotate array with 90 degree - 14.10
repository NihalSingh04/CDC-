#include <iostream>
#include <vector>
using namespace std;

// Function to rotate the matrix by 90 degrees clockwise
void rotate90(vector<vector<int>>& matrix) {
    int n = matrix.size();
    int m = matrix[0].size();

    vector<vector<int>> rotated(m, vector<int>(n));

    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            rotated[j][n - 1 - i] = matrix[i][j];
        }
    }

    // Copy back to original matrix
    matrix = rotated;

    // Print rotated matrix
    cout << "Rotated Matrix (90 deg clockwise):\n";
    for (auto &row : matrix) {
        for (auto &val : row)
            cout << val << " ";
        cout << endl;
    }
}

int main() {
    vector<vector<int>> matrix = {
        {1, 2, 3},
        {4, 5, 6},
        {7, 8, 9}
    };

    rotate90(matrix);

    return 0;
}

/*
Explanation:
- For a matrix element at (i,j), its rotated position is (j, n-1-i).
- Create a new rotated matrix and copy back.

Time Complexity: O(n*m)
Space Complexity: O(n*m) due to extra rotated matrix
*/
