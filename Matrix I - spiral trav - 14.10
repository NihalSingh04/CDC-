#include <iostream>
#include <vector>
using namespace std;

void spiralTraversal(vector<vector<int>> &matrix)
{
  int top = 0;
  int bottom = matrix.size() - 1;
  int left = 0;
  int right = matrix[0].size() - 1;

  cout << "Spiral Traversal: ";

  while (top <= bottom && left <= right)
  {
    // Traverse from left to right
    for (int i = left; i <= right; i++)
      cout << matrix[top][i] << " ";
    top++;

    // Traverse from top to bottom
    for (int i = top; i <= bottom; i++)
      cout << matrix[i][right] << " ";
    right--;

    // Traverse from right to left
    if (top <= bottom)
    {
      for (int i = right; i >= left; i--)
        cout << matrix[bottom][i] << " ";
      bottom--;
    }

    // Traverse from bottom to top
    if (left <= right)
    {
      for (int i = bottom; i >= top; i--)
        cout << matrix[i][left] << " ";
      left++;
    }
  }
  cout << endl;
}

int main()
{
  vector<vector<int>> matrix = {
      {1, 2, 3},
      {4, 5, 6},
      {7, 8, 9}};

  spiralTraversal(matrix);
  return 0;
}

/*
Explanation:
- Start with four boundaries: top, bottom, left, right.
- Traverse the outer layer in 4 steps and shrink boundaries inward.
- Repeat until all elements are printed.

Time Complexity: O(n*m)
Space Complexity: O(1)
*/
