#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

// Function to find median in a row-wise sorted matrix
int findMedian(vector<vector<int>>& matrix) {
    int n = matrix.size();
    int m = matrix[0].size();

    vector<int> temp;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            temp.push_back(matrix[i][j]);
        }
    }

    sort(temp.begin(), temp.end()); // sort all elements
    int size = temp.size();
    return temp[size / 2]; // median
}

int main() {
    vector<vector<int>> matrix = {
        {1, 3, 5},
        {2, 6, 9},
        {3, 6, 9}
    };

    cout << "Median of the matrix is: " << findMedian(matrix) << endl;

    return 0;
}

/*
Explanation:
- Flatten the matrix into a single array.
- Sort the array and pick the middle element.
- Works for odd number of elements. For even, typically average of two middle elements.

Time Complexity: O(n*m*log(n*m)) due to sorting
Space Complexity: O(n*m) for temp array
*/
